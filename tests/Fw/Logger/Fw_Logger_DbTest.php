<?php

/**
 * Test class for Fw_Logger.
 * Generated by PHPUnit on 2011-12-30 at 14:05:58.
 */
class Fw_Logger_DbTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var Fw_Logger_Db
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp($callback = null) {
		$this->object = new Fw_Logger_Db(new Fw_Config(array()), $callback);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

//	public static function tearDownAfterClass() {
//	}

	/**
	 * @expectedException Fw_Exception_Logger
	 */
	public function testPrepareExceptionEmptyCallback() {
		$data = array('var1' => 'aaaa', 'var2' => array('a', 'b'));
		$this->object->save($data);
	}

	/**
	 * @expectedException Fw_Exception_Logger
	 */
	public function testPrepareExceptionNotCallable() {
		$this->setUp('aaaaaa');
		$data = array('var1' => 'aaaa', 'var2' => array('a', 'b'));
		$this->object->save($data);
	}

	public function testPrepare() {
		$data = array('var1' => 'aaaa', 'var2' => array('a', 'b'));
		$func = function($input) {
					return array(
						'col1' => $input['var1'],
						'col2' => json_encode($input['var2'])
					);
				};
		$this->setUp($func);
		@$this->object->save($data);

		$got = $this->object->getData();
		$this->assertTrue(is_array($got));

		//	checking prepared content
		$prepared_data = $func($data);
		$this->assertEquals($prepared_data, $got);
	}

	/**
	 * @expectedException Fw_Exception_Config
	 */
	public function testWriteExceptionNoDbInConfig() {
		$this->object = new Fw_Logger_Db(new Fw_Config(array()), function($input) {
							return array(
								'col1' => $input['var1'],
								'col2' => json_encode($input['var2'])
							);
						});
		$data = array('var1' => 'aaaa', 'var2' => array('a', 'b'));
		$this->object->save($data);
	}

	/**
	 * @expectedException Fw_Exception_Config
	 */
	public function testWriteExceptionNoTableInConfig() {
		$this->object = new Fw_Logger_Db(new Fw_Config(array('db' => Fw_Db::i())), function($input) {
							return array(
								'col1' => $input['var1'],
								'col2' => json_encode($input['var2'])
							);
						});
		$data = array('var1' => 'aaaa', 'var2' => array('a', 'b'));
		$this->object->save($data);
	}

	/**
	 * @expectedException Fw_Exception_Logger
	 * @expectedExceptionMessage Cannot save data to a database: 
	 */
	public function testWriteExceptionCannotInsert() {
		$this->object = new Fw_Logger_Db(new Fw_Config(array('db' => Fw_Db::i(), 'table' => 'aaaaa')), function($input) {
							return array(
								'col1' => $input['var1'],
								'col2' => json_encode($input['var2'])
							);
						});
		$data = array('var1' => 'aaaa', 'var2' => array('a', 'b'));
		$this->object->save($data);
	}

	/**
	 * @expectedException Fw_Exception_Logger
	 * @expectedExceptionMessage db parameter in config must be set, and has to be an instance of Fw_Db
	 */
	public function testWriteExceptionFalseDb() {
		$this->object = new Fw_Logger_Db(new Fw_Config(array('db' => false, 'table' => 'aaaaa')), function($input) {
							return array(
								'col1' => $input['var1'],
								'col2' => json_encode($input['var2'])
							);
						});
		$data = array('var1' => 'aaaa', 'var2' => array('a', 'b'));
		$this->object->save($data);
	}

	/**
	 * @expectedException Fw_Exception_Logger
	 * @expectedExceptionMessage Table name has to be set in Logger config
	 */
	public function testWriteExceptionFalseTable() {
		$this->object = new Fw_Logger_Db(new Fw_Config(array('db' => Fw_Db::i(), 'table' => false)), function($input) {
							return array(
								'col1' => $input['var1'],
								'col2' => json_encode($input['var2'])
							);
						});
		$data = array('var1' => 'aaaa', 'var2' => array('a', 'b'));
		$this->object->save($data);
	}

}